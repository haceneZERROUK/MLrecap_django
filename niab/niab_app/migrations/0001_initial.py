# Generated by Django 5.2 on 2025-04-14 21:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fr_title', models.CharField(max_length=255)),
                ('original_title', models.CharField(max_length=255)),
                ('country', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=100)),
                ('released_year', models.CharField(max_length=4)),
                ('date', models.DateField()),
                ('PEGI', models.CharField(max_length=50)),
                ('duration', models.DurationField()),
                ('duration_minutes', models.FloatField()),
                ('total_entrances', models.IntegerField(blank=True, null=True)),
                ('weekly_entrances', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('budget', models.BigIntegerField(blank=True, null=True)),
                ('income_boxoffice', models.BigIntegerField(blank=True, null=True)),
                ('profit', models.BigIntegerField(blank=True, null=True)),
                ('profitability', models.CharField(blank=True, max_length=50, null=True)),
                ('predicted_entries', models.IntegerField(blank=True, null=True)),
                ('prediction_date', models.DateTimeField(auto_now_add=True)),
                ('thumbnail_url', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_starting', models.DateField(unique=True)),
                ('total_revenue', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_costs', models.DecimalField(decimal_places=2, default=4900.0, max_digits=10)),
                ('occupancy_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('prediction_accuracy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='Pr√©nom')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Nom')),
                ('telephone', models.CharField(default='0000000000', max_length=10, null=True)),
                ('poste', models.CharField(default='Staff', max_length=100, null=True)),
                ('is_manager', models.BooleanField(default=False)),
                ('is_staff_member', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Screening',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.IntegerField(choices=[(1, 'Salle 1 (120 places)'), (2, 'Salle 2 (80 places)')])),
                ('week_starting', models.DateField()),
                ('estimated_daily_audience', models.IntegerField()),
                ('actual_daily_audience', models.IntegerField(blank=True, null=True)),
                ('price_per_ticket', models.DecimalField(decimal_places=2, default=10.0, max_digits=6)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='niab_app.movie')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('room_number', 'week_starting'), name='unique_screening_room_week')],
            },
        ),
    ]
